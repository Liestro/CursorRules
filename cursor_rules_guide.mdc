---
description: Rules for writing rules in the project
globs: **/*.mdc
---
## General Principles
1. Write rules in clear English, avoiding complex constructions.
2. Each rule should be brief and specific, ideally no more than two sentences. Use bullet points to break down complex rules if needed.
3. Use numbering for each rule so that AI can easily distinguish them.
4. If a rule relates to a specific programming language, indicate this explicitly (e.g., 'For Python: ...'). 
   Specify variations for different languages if applicable.

## Structure and Style
5. Begin each rule file with a concise `description` field that clearly states its purpose.
6. Use Markdown headings (##) to group rules into logical sections (e.g., 'Naming Conventions', 'Code Style') when there are more than 10 rules.
7. Provide simple, illustrative examples in code blocks for complex rules, specifying the programming language (e.g., python or javascript):

```python
# Example for Python
def calculate_total(items: list[dict]) -> float:
    """Calculates the total sum of items including tax."""
    return sum(item["price"] * (1 + item["tax_rate"]) for item in items)
```

```javascript
// Example for JavaScript
function validateUserInput(input) {
  if (!input || typeof input !== 'string') {
    throw new Error('Input must be a non-empty string');
  }
  
  return input.trim().toLowerCase();
}
```

## File Format Requirements
8. All rule files must have the .mdc extension (Markdown Configuration); files with other extensions will not be recognized by the system.
9. Organize rule files in the root directory or its subdirectories, using subfolders to categorize rules by topic or language if needed.

## Specific Recommendations
10. Use `globs` to specify which files the rules apply to if they are not project-wide (e.g., `**/python/*.mdc` for Python-specific rules).
11. Ensure rules are specific and measurable; avoid vague terms like 'good' or 'clean' without defining them.
    - Bad: "Make functions efficient."
    - Good: "Limit functions to a maximum of 50 lines to improve readability and maintainability."
12. If rules conflict, specify which rule takes precedence and under what conditions (e.g., 'This rule overrides rule X when Y applies').
13. Use this file (cursor_rules_guide.mdc) as a reference example for the proper structure, formatting, and organization of rule files. This document follows all its own recommendations and can serve as a template.

## Maintenance and Collaboration for AI Agent
14. When applying a rule, if it seems outdated, unclear, or ineffective for the current context, log it under `## Updates Needed` in `ai_log.md` with the rule number and a brief explanation of the issue for human review.
15. If feedback on a rule is provided (e.g., via comments or direct input), log it under `## Feedback Log` in `ai_log.md` with the rule number and a summary, then continue applying the rule unless instructed otherwise.
16. If a rule cannot be applied or requires deviation, log it under `## Exceptions` in `ai_log.md`, including the rule number, the reason for deviation, and the specific context (e.g., file or task).
17. Systematically track all rule applications under `## Effectiveness Metrics` in `ai_log.md`, regardless of outcome. For each application, note: (a) rule number, (b) context where it was applied, (c) outcome (positive/negative/neutral), and (d) brief explanation of the impact. This comprehensive data collection helps identify patterns and opportunities for improvement beyond individual problematic cases.