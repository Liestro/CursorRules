---
description: Rules for writing cursor rules in the project
globs: **/*.mdc
---

Always use this file if you are writing cursor rules for the project.

## Log Management Requirement
IMPORTANT: When you write rules, all actions must be logged according to the guidelines in @log_management_rules.mdc. This includes tracking updates needed, feedback received, exceptions, and effectiveness metrics.

## General Principles
1. Write rules in clear English, avoiding complex constructions.
2. Use numbering for each rule so that AI can easily distinguish them.
3. If a rule relates to a specific programming language, indicate this explicitly (e.g., 'For Python: ...'). Specify variations for different languages if applicable.

## Content Writing Guidelines
4. Each rule should be brief and specific, ideally no more than two sentences. Use numbered lists to break down complex rules if needed.
5. Ensure rules are specific and measurable; avoid vague terms like 'good' or 'clean' without defining them.
   5.1. Bad: "Make functions efficient."
   5.2. Good: "Limit functions to a maximum of 50 lines to improve readability and maintainability."
6. If rules conflict, specify which rule takes precedence and under what conditions. Always explicitly state which rule overrides another (e.g., 'Rule 5.2 overrides Rule 5.1 when...').

## File Structure and Organization
IMPORTANT: Strict adherence to the structure described in this section is mandatory - the system will not be able to process rules that deviate from this format.

7. Basic Requirements:
   7.1. All rule files must have the .mdc extension (Markdown Configuration)
   7.2. Place files in the same directory as related rules
   7.3. Organize in any directory structure that makes sense for the project
   7.4. All rule files must include a Log Management section immediately after the YAML frontmatter

8. YAML Frontmatter:
   8.1. Begin each file with YAML frontmatter enclosed by three dashes (---) at both start and end
   8.2. Include at minimum the following fields:
        8.2.1. `description`: Concise statement of the rules' purpose
        8.2.2. `globs`: Pattern specifying which files the rules apply to (e.g., `**/python/*.mdc`). Might be empty if the rules apply to all files.
   8.3. Do NOT include a top-level heading (# Title) as the frontmatter serves this purpose

9. Content Structure:
   9.1. Use Markdown headings (##) to group rules into logical sections
   9.2. The first section after frontmatter must be "Log Management Requirement" with the following text:
        "IMPORTANT: When processing or applying these rules, all actions must be logged according to the guidelines in `log_management_rules.mdc`. This includes tracking updates needed, feedback received, exceptions, and effectiveness metrics."
   9.3. Create sections when there are more than 10 rules or distinct categories
   9.4. Common section types include 'Naming Conventions', 'Code Style', etc.
   9.5. Rule numbering system:
        9.5.1. Use sequential numbering for main rules (not subrules) across all sections of the document.
        9.5.2. The first rule in the document starts with number 1.
        9.5.3. Number subrules in X.Y format, where X is the parent rule number and Y is the sequential number of the subrule starting from 1.
        9.5.4. If a subrule contains nested items, use X.Y.Z format for further nesting.
        9.5.5. Do not create numbered sublists with only one element. Include single subelements directly in the text of the main rule.

## Documentation Best Practices
10. Examples and Code Blocks: Provide illustrative examples for complex rules and use code blocks with language specification:

```python
# Example for Python
def calculate_total(items: list[dict]) -> float:
    """Calculates the total sum of items including tax."""
    return sum(item["price"] * (1 + item["tax_rate"]) for item in items)
```

```javascript
// Example for JavaScript
function validateUserInput(input) {
  if (!input || typeof input !== 'string') {
    throw new Error('Input must be a non-empty string');
  }
  
  return input.trim().toLowerCase();
}
```

11. Use the following template as a starting point for new rule files:

```markdown
---
description: Brief description of these rules
globs: **/*.ext
---

## Log Management Requirement
IMPORTANT: When processing or applying these rules, all actions must be logged according to the guidelines in `log_management_rules.mdc`. This includes tracking updates needed, feedback received, exceptions, and effectiveness metrics.

## Section Heading
1. First rule in this section
   1.1. First subrule
   1.2. Second subrule
2. Second rule in this section. Include single subrules directly in the parent rule.
```